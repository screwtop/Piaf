# Testing BLT's bgexec:

# [Install BLT from source...]
package require BLT
::blt::bgexec done cal
#% time {::blt::bgexec done cal}
#1003671 microseconds per iteration
# WTF?!

# Can we make it work in the background, at least?
package require Tk; wm withdraw .	;# Import Tk so we can use the event loop.

proc process {args} {
	puts "args = $args"
}

::blt::bgexec done -onoutput process cal
# Interesting: "process" is called immediately, but the bgexec command doesn't return for a second.  Could it be waiting to make sure things are all properly tidied up on close?

# The output variable has been set like so:
#% puts $done
#EXITED 29010 0 {child completed normally}

# OK, so we can get around the bgexec return delay using [after idle], right?

after idle {::blt::bgexec done -onoutput process cal}
# That's more like it - it returns immediately, and we only see the output from the "process" callback.  No need for "vwait done" (though it might be useful, right? or just use the calback?).

# vwait done

# Here we can see that bgexec is indeed returning a string when it finishes, a second after the output is actually processed:
after idle {puts [::blt::bgexec done -onoutput process cal]}


--

Oh, you're supposed to pass "&" as the last argument!  That makes the bgexec return immediately (though is there still some processing that continues for a second internally maybe? no matter...)

time {::blt::bgexec ::bgexecStatus -linebuffer 1 -onerror {puts} -onoutput {puts} cal &}
# Returns immediately.
# Also, remember that bgexec passes args automatically to the -onoutput and -onerror callbacks, namely the text of the output/error.

If you want to pass additional args to the command:
::blt::bgexec ::bgexecStatus -linebuffer 1 -onerror {puts} -onoutput {puts} cat /etc/fstab &

# Just to verify/illustrate that the output is handled line by line:
set ::line_number 1
proc handler {line_text} {
	puts "$::line_number: $line_text"
	incr ::line_number
}
::blt::bgexec ::bgexecStatus -linebuffer 1 -onerror {puts} -onoutput {handler} cat /etc/fstab &

# Excellent. :)  This looks ideal for background tasks that require one instance per Piaf instance (e.g. aspell, lexical scanners for highlighting, but not Frink, as it's quite heavyweight and doesn't need special settings per Piaf instance - makes more sense to share it between programs on the same desktop system).

# But how do we send lines of text for processing to the bgexec'd process?  There's no mention of "input" or "stdin" in the bgexec man page...
# Ah, maybe use a FIFO?!

# Also: [tkwait] or [vwait]?!

exec mkfifo /tmp/piaf_wordcount
#exec/bgexec ... wordcount < /tmp/piaf_wordcount	;# Do this first, otherwise the [open] below will block!
# Oh, but the bgexec will also block until there's input available from the FIFO! Gah.
::blt::bgexec ::bgexecStatus -linebuffer 1 -onerror {puts} -onoutput {handler} wordcount < /tmp/piaf_wordcount &

set piaf_to_scanner [open /tmp/piaf_wordcount w]
after idle {puts $piaf_to_scanner whatever}
...
close $piaf_to_scanner

# And of course there are buffering issues because it's a noninteractive pipe...bah...



