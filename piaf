#!/usr/bin/env wish8.6

# My (increasingly less) simple Tcl/Tk text editor/idioter.


tk appname Piaf
wm title . [tk appname]

#puts stderr $argv

#puts stderr $env(PWD)
#puts stderr [info script]
#cd /usr/local/piaf/bin	;# Hmm, better not to [cd], in case a relative filename was given on the command line.
set ::binary_path /usr/local/piaf/bin	;# Or is it better to do something with auto_path?
# lappend auto_path $::binary_path

# TODO: handle command-line arguments (open files, perhaps additional options for e.g. batch running of scripts)


namespace eval ::piaf {}

set ::status "Starting upâ€¦"

source "$::binary_path/settings.tcl"	;# Load system-wide settings first...
catch {source ~/.piaf/settings.tcl}		;# ...then any user-defined settings.

# We use an SQLite database to keep track of recently modified files, collections of files making up projects, etc.
# Maybe don't defer loading the database, so we can log loading the initial file specified on the command line (if any).
if {[catch {package require sqlite3} message]} {
	# No sqlite3
	puts stderr $message
	puts stderr "sqlite3 library for Tcl not found; please install it for greater functionality"
	puts stderr "	e.g. sudo apt-get install libsqlite3-tcl"
	set ::use_database false
} else {
	# We do have the sqlite3 library at least...
	# Now see if we have a user database:
	# TODO: fix: this doesn't work at present (sqlite3 will create the database implicitly if it doesn't exist!)
	if {[catch {sqlite3 ::piaf::database ~/.piaf/data.db} message]} {
		# Could not open.  Perhaps it doesn't exist.  If so, create it.  If something else, give up?  How do we tell?  We just get "unable to open database file" if it fails.  And SQLite's [errorcode] is only available for an open database.
		# The install script should have created the database anyway.
		puts stderr $message
		puts stderr "Try running the install script to create the user database (~/.piaf/data.db)."
	} else {
		puts stderr "SQLite database opened, version [::piaf::database version]"
		set ::use_database true
	}
}


source "$::binary_path/tooltips.tcl"
source "$::binary_path/menus.tcl"
# TODO: toolbar?  Separate file.

frame .editor

# TODO: tidy up wrapping option setting.
# Most of the editor happens in this one line, thanks to Tk's great text widget:
text .editor.text -wrap word -undo true -height 10 -width 80
set ::wrap_mode "Word Wrap"

# Scrollbar for the main text (on the left, dammit!):
scrollbar .editor.scrollbar -command [list .editor.text yview] -troughcolor #606060
.editor.text configure -yscrollcommand [list .editor.scrollbar set]

pack .editor.text -side right -expand true -fill both
pack .editor.scrollbar -side left -fill y


# Apply font preference:
.editor.text configure -font $::font
.editor.text configure -spacing1 $::line_padding -spacing3 $::line_padding
# -spacing2 is for wrapped lines, and we kinda want to emphasise that they are just one line, so leave that at 0.

# Apply a colour scheme:
.editor.text configure -background $::background_colour -foreground $::text_colour -selectbackground $::selectbackground_colour -insertbackground $::insertbackground_colour


# Bring in various support functionality:

source "$::binary_path/functions.tcl"	;# Text filters
source "$::binary_path/locking.tcl"	;# Locking routines, used by certain file commands
source "$::binary_path/commands.tcl"	;# Editor command set
source "$::binary_path/find_panel.tcl"	;# Toggleable simple Find panel
source "$::binary_path/unsaved_panel.tcl"	;# Toggleable panel for dealing with unsaved changes
source "$::binary_path/statusbar.tcl"
source "$::binary_path/wordcount.tcl"
source "$::binary_path/console.tcl"
source "$::binary_path/current_line_highlighting.tcl"	;# Must go before text_modification_tracking!
source "$::binary_path/text_modification_tracking.tcl"	;# Important for detecting unsaved changes, and also includes colouring the "void" beyond EOF differently from the editor text extent.
source "$::binary_path/insert_mark_tracking.tcl"	;# Generating virtual events for motion of the "insert" mark (cursor position)
source "$::binary_path/printing.tcl"
source "$::binary_path/bindings.tcl"	;# Key event bindings
catch {source ~/.piaf/bindings.tcl}	;# User can override and add their own too
source "$::binary_path/recent_files.tcl"	;# This has to be run early because of the possibility of loading a file specified on the command line.  open_file calls refresh_recent_files.

# Apply new grid layout:
# (TODO: remove existing pack calls that are made redundant by this)

set ::main_column 0	;# For when we add some sidebars
# TODO: maybe a row counter variable as well?  IIRC that's how we managed it in TclJACK.
grid columnconfigure . $::main_column -weight 1	;# Main column should fill the width of the window
# "grid slaves ." to find children
grid configure .menubar   -row 0 -column $::main_column -sticky ew
grid configure .editor    -row 1 -column $::main_column -sticky nsew; grid rowconfigure . 1 -weight 1
proc show_unsaved_panel {} {
grid configure .unsaved   -row 2 -column $::main_column -sticky ew
}
proc show_find_panel {} {
grid configure .search    -row 3 -column $::main_column -sticky ew
}
grid configure .statusbar -row 4 -column $::main_column -sticky ew

grid forget .unsaved
grid forget .search
# TODO: procs to restore those togglable frames.

# That's it for the GUI layout.


set ::filename ""

# Put a trace on the filename variable, for things that can't be updated automatically using -textvariable (such as the window title):
trace variable ::filename w filename_changed

# What to do when the filename changes?
proc filename_changed {name1 name2 op} {
	wm title . "[tk appname]: [file tail $::filename]"
}


# Check if a filename was specified on the command line:
if {[llength $argv] > 0} {open_file [lindex $argv 0]}

# Set things up ready for the user to edit the text:
.editor.text mark set insert 0.0
focus .editor.text

# (Optionally?) start the Frink server:
start_frinkserver

wm protocol . WM_DELETE_WINDOW quit

set ::status "Ready"

# Certain stuff can be done in the background after the GUI has loaded.  Wish doesn't display the main window until it reaches EOF, when running a script file, so we have to arrange for these things to happen later:
#set ::running true	;# Where/how is this used?
set ::setup_done false
proc deferred_startup_actions {} {
	after idle {
		if { ! $::setup_done} {
			puts stderr "Running deferred startup actions.  Window geometry = [wm geometry .]."
			# TODO: maybe a "foreach script $deferred_scripts ..."?
			after 500 {
			#	source "$::binary_path/scanning_external.tcl"	;# Additional stuff for using external Flex-based scanners. Has to be loaded first.
				source "$::binary_path/scanning.tcl"
				source "$::binary_path/spelling.tcl"	;# General spelling routines/setup
			#	source "$::binary_path/spelling_builtin.tcl"	;# My own quick-n-dirty spellchecker. Loading the dictionary can take some time, so better to do this after everything else has been set up.  The user probably isn't going to start spell checking in the first second anyway.		Even with the [after]s, this is still obtrusive, so maybe try to load it in the background (or don't bother with any of this)
				source "$::binary_path/spelling_aspell.tcl"	;# Aspell does a better job, really.  And it's in a separate process so it won't bog down the GUI.  Also, is this responsible for the command prompt not returning when testing a la "package require Tk; source piaf"?
			}
			set ::setup_done true
		}
	}
}

# Do non-essential startup things after the window has appeared:
bind . <Map> deferred_startup_actions
#deferred_startup_actions

# And from here we just enter the Tcl event loop.
# It'd be nice to attach a Tcl shell REPL to stdin/stdout for controlling the editor from a command shell.
# ...and perhaps also a remote-control FIFO.
# [fork]? (Expect/TclX)


